# Author: Alfio Lazzaro (alfio.lazzaro@chem.uzh.ch), UZH, 2018
# Program environments:
# - module load PrgEnv-intel
# - module load fftw
# To avoid problems with thread pinning (Intel uses N+1 threads for a
# N-threaded OMP run) aprun supports the option "-cc depth" in combination
# with the env variable "export KMP_AFFINITY=compact"

LIBXSMM  = /home/users/p02464/libxsmm/1.8.3_skl_intel
LIBXC    = /home/users/p02464/libs/libxc/intel/4.0.3
LIBINT   = /home/users/p02464/libs/libint/intel/1.1.6
LIBELPA  = /home/users/p02464/libs/libelpa/intel/2017.05.002

CC       = cc
CPP      = 
FC       = ftn
LD       = ftn
AR       = ar -r
CPPFLAGS =
DFLAGS   = -D__FFTW3 -D__HAS_NO_SHARED_GLIBC -D__LIBXSMM \
	   -D__parallel -D__SCALAPACK \
	   -D__ELPA=201705 \
	   -D__LIBXC \
           -D__LIBINT -D__LIBINT_MAX_AM=7 -D__LIBDERIV_MAX_AM1=6 \
           -D__MAX_CONTR=4
CFLAGS   = $(DFLAGS) -O2
FCFLAGS  = $(DFLAGS) -O2 -fopenmp -funroll-loops -fpp -free
FCFLAGS += -fp-model precise
FCFLAGS += -g -traceback
FCFLAGS += -I$(LIBXSMM)/include
FCFLAGS += -I$(LIBXC)/include
FCFLAGS += -I$(LIBELPA)/include/elpa_openmp-2017.05.002/modules -I$(LIBELPA)/include/elpa_openmp-2017.05.002/elpa
LDFLAGS  = $(FCFLAGS) -static-intel
LDFLAGS_C = $(FCFLAGS) -static-intel -nofor_main
LIBS     = -lfftw3 -lfftw3_threads
LIBS    += -L$(LIBXSMM)/lib -lxsmmf -lxsmm -ldl
LIBS    += -L$(LIBXC)/lib -lxcf03 -lxc
LIBS    += -L$(LIBINT)/lib -lderiv -lint -lstdc++
LIBS    += -L$(LIBELPA)/lib -lelpa_openmp

# Required due to memory leak that occurs if high optimisations are used
mp2_optimize_ri_basis.o: mp2_optimize_ri_basis.F
			 $(FC) -c $(subst O2,O0,$(FCFLAGS)) $<
