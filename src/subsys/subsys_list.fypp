#!-------------------------------------------------------------------------------------------------!
#!   CP2K: A general program to perform molecular dynamics simulations                             !
#!   Copyright (C) 2000 - 2018  CP2K developers group                                              !
#!-------------------------------------------------------------------------------------------------!
#:mute

#! *************************************************************************************************
#!> \brief Fypp macro to create a simple a simple array based list of the given type
#!> \author Ole Schuett
#! *************************************************************************************************
#:def subsys_list_macro(name)

#:set el_type = "TYPE("+name+"_type)"

  LOGICAL, PRIVATE, PARAMETER :: debug_this_module=.TRUE.
  CHARACTER(len=*), PRIVATE, PARAMETER :: moduleN='${name}$_list_types'
  INTEGER, PRIVATE, SAVE :: last_${name}$_list_id=0

  !API
  PUBLIC :: ${name}$_list_type,   ${name}$_list_p_type,&
            ${name}$_list_create, ${name}$_list_retain,&
            ${name}$_list_release

! **************************************************************************************************
!> \brief represent a list of objects
!> \param id_nr identification number of this list
!> \param ref_count reference count (see doc/ReferenceCounting.html)
!> \param n_el the number of elements in the list
!> \param owns_list if the els are owned by this structure, and
!>        should be deallocated by it
!> \param list the array of object, might be oversized,
!>        only the fist n_el have some meaning
!> \par History
!>      08.2003 created [fawzi]
!> \author Fawzi Mohamed
! **************************************************************************************************
  TYPE ${name}$_list_type
     INTEGER :: id_nr, ref_count, n_els
     LOGICAL :: owns_els
     ${el_type}$, DIMENSION(:), POINTER :: els
  END TYPE ${name}$_list_type

! **************************************************************************************************
!> \brief represents a pointer to a list
!> \param list the pointer to the list
!> \par History
!>      08.2003 created [fawzi]
!> \author Fawzi Mohamed
! **************************************************************************************************
  TYPE ${name}$_list_p_type
     TYPE(${name}$_list_type), POINTER :: list
  END TYPE ${name}$_list_p_type

CONTAINS

! **************************************************************************************************
!> \brief creates a list
!> \param list the list to allocate and initialize
!> \param els_ptr the elements to store in the list (the array is only,
!>        referenced, not copied!)
!> \param owns_els if the list takes the ownership of els_ptr and
!>        will deallocate it (defaults to true)
!> \param n_els number of elements in the list (at least one els_ptr or
!>        n_els should be given)
!> \par History
!>      08.2003 created [fawzi]
!> \author Fawzi Mohamed
! **************************************************************************************************
SUBROUTINE ${name}$_list_create(list, els_ptr, &
     owns_els, n_els)
  TYPE(${name}$_list_type), POINTER, OPTIONAL :: list
  ${el_type}$, DIMENSION(:), POINTER, OPTIONAL :: els_ptr
  LOGICAL, INTENT(in), OPTIONAL :: owns_els
  INTEGER, INTENT(in), OPTIONAL :: n_els

  CHARACTER(len=*), PARAMETER :: routineN='${name}$_list_create',&
        routineP=moduleN//':'//routineN

  CPASSERT(PRESENT(els_ptr).OR.PRESENT(n_els))

  ALLOCATE(list)
  last_${name}$_list_id=last_${name}$_list_id+1
  list%id_nr=last_${name}$_list_id
  list%ref_count=1
  list%owns_els=.TRUE.
  list%n_els=0
  IF (PRESENT(owns_els)) list%owns_els=owns_els
  NULLIFY(list%els)
  IF (PRESENT(els_ptr)) THEN
     list%els => els_ptr
     IF (ASSOCIATED(els_ptr)) THEN
        list%n_els=SIZE(els_ptr)
     END IF
  END IF
  IF (PRESENT(n_els)) list%n_els=n_els
  IF (.NOT.ASSOCIATED(list%els)) THEN
     ALLOCATE(list%els(list%n_els))
     CPASSERT(list%owns_els)
  END IF
END SUBROUTINE ${name}$_list_create

! **************************************************************************************************
!> \brief retains a list (see doc/ReferenceCounting.html)
!> \param list the list to retain
!> \par History
!>      08.2003 created [fawzi]
!> \author Fawzi Mohamed
! **************************************************************************************************
SUBROUTINE ${name}$_list_retain(list)
  TYPE(${name}$_list_type), POINTER :: list

  CHARACTER(len=*), PARAMETER :: routineN='${name}$_list_retain',&
        routineP=moduleN//':'//routineN


  CPASSERT(ASSOCIATED(list))
  CPASSERT(list%ref_count>0)
  list%ref_count=list%ref_count+1
END SUBROUTINE ${name}$_list_retain

! **************************************************************************************************
!> \brief releases a  list (see doc/ReferenceCounting.html)
!> \param list the list to release
!> \par History
!>      08.2003 created [fawzi]
!> \author Fawzi Mohamed
! **************************************************************************************************
SUBROUTINE ${name}$_list_release(list)
  TYPE(${name}$_list_type), POINTER :: list

  CHARACTER(len=*), PARAMETER :: routineN='${name}$_list_release',&
        routineP=moduleN//':'//routineN

  IF (ASSOCIATED(list)) THEN
     CPASSERT(list%ref_count>0)
     list%ref_count=list%ref_count-1
     IF (list%ref_count==0) THEN
        IF (list%owns_els) THEN
           IF (ASSOCIATED(list%els)) THEN
              CALL deallocate_${name}$_set(list%els)
           END IF
        END IF
        NULLIFY(list%els)
        DEALLOCATE(list)
     END IF
  END IF
  NULLIFY(list)
END SUBROUTINE ${name}$_list_release

#:enddef subsys_list_macro
#:endmute
