#
# the build script can generate optimized routines packed in a library for
#
# 1) 'nn' => C=C+MATMUL(A,B)
# 2) 'tn' => C=C+MATMUL(TRANSPOSE(A),B)
# 3) 'nt' => C=C+MATMUL(A,TRANSPOSE(B))
# 4) 'tt' => C=C+MATMUL(TRANPOSE(A),TRANPOSE(B))
#
# select a tranpose_flavor from the list 1 2 3 4
#
transpose_flavor=1

# 1) d => double precision real
# 2) s => single precision real
# 3) z => double precision complex
# 4) c => single precision complex 
#
# select a data_type from the list 1 2 3 4
#
data_type=1

#
# matrix dimensions for which optimized routines will be generated. 
# since all combinations of M,N,K are being generated the size of the library becomes very large
# if too many sizes are being optimized for. Numbers have to be ascending.
#
dims_small="1 4 5 6 8 9 13 16 17 22 23 24 26 32"

#
# tiny dimensions used are used as primivitves and generated in an 'exhaustive' search.
# They should be a sequence from 1 to N,
# where N is a number that is large enough to have good in cache performance
#
dims_tiny=`seq 1 24`
